/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.example.jsonpath.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.example.jsonpath.psi.JsonPathTypes;
import com.intellij.psi.TokenType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_JsonPathLexer.flex</tt>
 */
public class _JsonPathLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 13952 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\2\0\1\7\1\10\1\11\1\12\1\11\1\12\34\11\1\13\1"+
    "\14\1\15\10\0\1\16\1\17\1\11\1\20\4\11\1\21\10\11\1\22\12\11\1\5\1\11\1\23"+
    "\1\5\1\11\1\24\4\0\1\11\1\6\1\25\2\0\2\11\1\6\1\0\1\26\1\5\5\11\1\27\1\30"+
    "\1\31\1\0\1\32\1\11\1\0\1\33\5\11\1\34\1\35\1\36\1\11\1\6\1\37\1\11\1\40\1"+
    "\41\1\0\1\11\1\42\4\0\1\11\1\43\4\0\1\44\2\11\1\45\1\0\1\46\1\14\1\5\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\2\14\1\55\1\50\1\51\1\56\1\0\1\57\1\0\1\60\1\61"+
    "\1\20\1\51\1\62\1\0\1\63\1\14\1\64\1\65\1\50\1\51\1\62\1\0\1\54\1\14\1\35"+
    "\1\66\1\67\1\70\1\71\1\0\1\63\2\0\1\72\1\32\1\51\1\45\1\0\1\73\1\14\1\0\1"+
    "\74\1\32\1\51\1\75\1\0\1\53\1\14\1\76\1\72\1\32\1\11\1\77\1\53\1\100\1\14"+
    "\1\36\1\101\1\102\1\11\1\103\1\104\3\0\1\5\2\11\1\105\1\104\3\0\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\2\0\1\63\3\0\1\114\1\11\1\115\1\0\1\116\7\0\2\11"+
    "\1\6\1\117\1\0\1\120\1\121\1\122\1\123\1\0\2\11\1\124\2\11\1\125\24\11\1\126"+
    "\1\127\2\11\1\126\2\11\1\130\1\131\1\12\3\11\1\131\3\11\1\6\2\0\1\11\1\0\5"+
    "\11\1\132\1\5\45\11\1\133\1\11\1\5\1\6\4\11\1\6\1\134\1\135\1\14\1\11\1\14"+
    "\1\11\1\14\1\135\1\63\3\11\1\136\1\0\1\137\4\0\5\11\1\24\1\140\1\11\1\141"+
    "\4\11\1\34\1\11\1\142\3\0\1\11\1\143\1\144\2\11\1\145\1\11\1\71\3\0\1\11\1"+
    "\104\3\11\1\144\4\0\1\146\5\0\1\101\2\11\1\136\1\147\3\0\1\150\1\11\1\151"+
    "\1\36\2\11\1\34\1\0\2\11\1\136\1\0\1\33\1\36\1\11\1\143\1\42\5\0\1\152\1\153"+
    "\14\11\4\0\21\11\1\132\2\11\1\132\1\154\1\11\1\143\3\11\1\155\1\156\1\157"+
    "\1\115\1\156\7\0\1\160\1\0\1\115\6\0\1\161\1\162\1\163\1\164\1\165\3\0\1\166"+
    "\147\0\2\11\1\142\2\11\1\142\10\11\1\167\1\170\2\11\1\124\3\11\1\171\1\0\1"+
    "\11\1\104\4\172\4\0\1\117\35\0\1\173\2\0\1\174\1\5\4\11\1\175\1\5\4\11\1\125"+
    "\1\101\1\11\1\143\1\5\4\11\1\142\1\0\1\11\1\6\3\0\1\11\40\0\133\11\1\34\4"+
    "\0\135\11\1\34\2\0\10\11\1\115\4\0\2\11\1\143\20\11\1\115\1\11\1\176\1\0\2"+
    "\11\1\142\1\117\1\11\1\143\4\11\1\34\2\0\1\177\1\200\5\11\1\201\1\11\1\142"+
    "\1\24\3\0\1\177\1\202\1\11\1\25\1\0\3\11\1\136\1\200\2\11\1\136\3\0\1\203"+
    "\1\36\1\11\1\34\1\11\1\104\1\0\1\11\1\115\1\44\2\11\1\25\1\117\1\0\1\204\1"+
    "\205\2\11\1\42\1\0\1\206\1\0\1\11\1\207\3\11\1\210\1\211\1\212\1\6\1\60\1"+
    "\213\1\214\1\172\2\11\1\125\1\34\7\11\1\25\1\0\72\11\1\136\1\11\1\215\2\11"+
    "\1\145\20\0\26\11\1\143\6\11\1\71\2\0\1\104\1\216\1\51\1\217\1\220\6\11\1"+
    "\14\1\0\1\150\25\11\1\143\1\0\4\11\1\200\2\11\1\24\2\0\1\145\7\0\1\204\7\11"+
    "\1\115\2\0\1\5\1\6\1\5\1\6\1\221\4\11\1\142\1\222\1\223\2\0\1\224\1\11\1\12"+
    "\1\225\2\143\2\0\7\11\1\6\30\0\1\11\1\115\3\11\1\63\2\0\2\11\1\0\1\11\1\226"+
    "\2\11\1\34\1\11\1\143\2\11\1\227\3\0\11\11\1\143\1\0\2\11\1\227\1\11\1\145"+
    "\2\11\1\24\3\11\1\136\11\0\23\11\1\104\1\11\1\34\1\24\11\0\1\230\2\11\1\231"+
    "\1\11\1\34\1\11\1\104\1\11\1\142\4\0\1\11\1\232\1\11\1\34\1\11\1\71\4\0\3"+
    "\11\1\233\4\0\1\63\1\234\1\11\1\136\2\0\1\11\1\115\1\11\1\115\2\0\1\114\1"+
    "\11\1\144\1\0\3\11\1\34\1\11\1\34\1\11\1\25\1\11\1\14\6\0\4\11\1\42\3\0\3"+
    "\11\1\25\3\11\1\25\60\0\1\150\2\11\1\24\4\0\1\150\2\11\2\0\1\11\1\42\1\0\1"+
    "\150\1\11\1\104\2\0\2\11\1\235\1\150\2\11\1\25\1\236\1\237\2\0\1\11\1\20\1"+
    "\145\5\0\1\240\1\241\1\42\2\11\1\142\2\0\1\65\1\50\1\51\1\62\1\0\1\242\1\14"+
    "\11\0\3\11\1\144\1\243\3\0\3\11\1\0\1\244\13\0\2\11\1\142\2\0\1\245\2\0\3"+
    "\11\1\0\1\246\3\0\2\11\1\6\5\0\1\11\1\71\30\0\4\11\1\0\1\117\34\0\3\11\1\42"+
    "\20\0\1\51\1\11\1\142\1\0\1\63\2\0\1\200\1\11\67\0\71\11\1\71\16\0\14\11\1"+
    "\136\53\0\2\11\1\142\75\0\44\11\1\104\33\0\43\11\1\42\1\11\1\142\7\0\1\11"+
    "\1\143\1\0\3\11\1\0\1\136\1\0\1\150\1\247\1\11\67\0\4\11\1\144\1\63\3\0\1"+
    "\150\4\0\1\63\1\0\76\11\1\115\1\0\57\11\1\25\20\0\1\14\77\0\6\11\1\6\1\115"+
    "\1\42\1\71\66\0\5\11\1\204\3\11\1\135\1\250\1\251\1\252\3\11\1\253\1\254\1"+
    "\11\1\255\1\256\1\32\24\11\1\257\1\11\1\32\1\125\1\11\1\125\1\11\1\204\1\11"+
    "\1\204\1\142\1\11\1\142\1\11\1\51\1\11\1\51\1\11\1\206\3\0\14\11\1\144\3\0"+
    "\4\11\1\136\113\0\1\252\1\11\1\260\1\261\1\262\1\263\1\264\1\265\1\266\1\145"+
    "\1\267\1\145\24\0\55\11\1\104\2\0\103\11\1\144\15\11\1\143\150\11\1\14\25"+
    "\0\41\11\1\143\36\0");

  /* The ZZ_CMAP_A table has 2944 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\24\0\1\5\5\0\1\12\1\0\1\13\1\2\1\7\1\0\1\3\11\4\6\0\1\6\32\1\1\10\1\0\1\11"+
    "\1\0\1\1\1\0\32\1\17\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0\12\1\4\0\14\1\16"+
    "\0\5\1\7\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\4\1\1\0\23\1\1\0\13\1\10\0\15\1\2\0\1\1\6\0\10\1\10\0\3\1\33\0\6"+
    "\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0\2\1\1\0\16\1\15\0\11\1\13\0\1\1\30"+
    "\0\6\1\4\0\2\1\4\0\1\1\5\0\6\1\4\0\1\1\11\0\1\1\3\0\1\1\7\0\11\1\7\0\5\1\1"+
    "\0\10\1\6\0\26\1\3\0\1\1\2\0\1\1\7\0\11\1\4\0\10\1\2\0\2\1\2\0\26\1\1\0\7"+
    "\1\1\0\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0\1\1\5\0\6\1\4\0\2\1\1\0\2"+
    "\1\1\0\2\1\1\0\2\1\17\0\4\1\1\0\1\1\3\0\3\1\20\0\11\1\1\0\2\1\1\0\2\1\1\0"+
    "\5\1\3\0\1\1\2\0\1\1\30\0\1\1\13\0\10\1\2\0\1\1\3\0\1\1\1\0\6\1\3\0\3\1\1"+
    "\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0\14\1\13\0\10\1\1\0\2\1"+
    "\10\0\3\1\5\0\1\1\4\0\10\1\1\0\6\1\1\0\5\1\3\0\1\1\3\0\2\1\15\0\13\1\2\0\1"+
    "\1\6\0\3\1\10\0\1\1\5\0\22\1\3\0\10\1\1\0\11\1\1\0\1\1\2\0\7\1\11\0\1\1\1"+
    "\0\2\1\15\0\2\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1"+
    "\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0\14\1"+
    "\1\0\24\1\13\0\5\1\22\0\7\1\4\0\4\1\3\0\1\1\3\0\2\1\7\0\3\1\4\0\15\1\14\0"+
    "\1\1\1\0\6\1\1\0\1\1\5\0\1\1\2\0\13\1\1\0\15\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\16\1\2\0\6\1\2\0\15\1\2\0"+
    "\1\1\1\0\10\1\7\0\15\1\1\0\6\1\23\0\1\1\4\0\1\1\3\0\5\1\2\0\22\1\1\0\1\1\5"+
    "\0\17\1\1\0\16\1\2\0\5\1\13\0\14\1\13\0\1\1\15\0\7\1\7\0\16\1\15\0\2\1\11"+
    "\0\4\1\1\0\4\1\3\0\2\1\11\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0\7\1\1"+
    "\0\1\1\3\0\3\1\1\0\7\1\3\0\4\1\2\0\6\1\5\0\1\1\15\0\1\1\2\0\1\1\4\0\1\1\2"+
    "\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1\5"+
    "\0\5\1\4\0\1\1\4\0\2\1\13\0\5\1\6\0\4\1\3\0\2\1\14\0\10\1\7\0\10\1\1\0\7\1"+
    "\6\0\2\1\12\0\5\1\5\0\2\1\3\0\7\1\6\0\3\1\12\0\2\1\13\0\11\1\2\0\27\1\2\0"+
    "\7\1\1\0\3\1\1\0\4\1\1\0\4\1\2\0\6\1\3\0\1\1\1\0\1\1\2\0\5\1\1\0\12\1\12\0"+
    "\5\1\1\0\3\1\1\0\10\1\4\0\7\1\3\0\1\1\3\0\2\1\1\0\1\1\3\0\2\1\2\0\5\1\2\0"+
    "\1\1\1\0\1\1\30\0\3\1\3\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1\4\0\5\1\3\0\5\1\5\0"+
    "\1\1\1\0\10\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0\12\1\6\0\12\1\2\0\6\1\2"+
    "\0\6\1\2\0\6\1\2\0\3\1\3\0\14\1\1\0\16\1\1\0\2\1\1\0\2\1\1\0\10\1\6\0\4\1"+
    "\4\0\16\1\2\0\1\1\1\0\14\1\1\0\2\1\3\0\1\1\2\0\4\1\1\0\2\1\12\0\10\1\6\0\6"+
    "\1\1\0\3\1\1\0\12\1\3\0\1\1\12\0\4\1\25\0\1\1\1\0\1\1\3\0\7\1\1\0\1\1\1\0"+
    "\4\1\1\0\17\1\1\0\2\1\14\0\3\1\7\0\4\1\11\0\2\1\1\0\1\1\20\0\4\1\10\0\1\1"+
    "\13\0\10\1\5\0\3\1\2\0\1\1\2\0\2\1\2\0\4\1\1\0\14\1\1\0\1\1\1\0\7\1\1\0\21"+
    "\1\1\0\4\1\2\0\10\1\1\0\7\1\1\0\14\1\1\0\4\1\1\0\5\1\1\0\1\1\3\0\14\1\2\0"+
    "\10\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1"+
    "\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12"+
    "\1\1\0\5\1\1\0\3\1\1\0\5\1\1\0\5\1");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[13];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\14\0\30\0\14\0\44\0\14\0\14\0\60"+
    "\0\14\0\14\0\14\0\14\0\14";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[13];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\15\0\4\3\12\0\2\5"+
    "\16\0\1\15\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[60];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\1\2\11\1\1\5\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[13];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _JsonPathLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JsonPathLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 12: break;
          case 2: 
            { return JsonPathTypes.IDENTIFIER;
            } 
            // fall through
          case 13: break;
          case 3: 
            { return JsonPathTypes.NUMBER;
            } 
            // fall through
          case 14: break;
          case 4: 
            { return JsonPathTypes.ROOT_CONTEXT;
            } 
            // fall through
          case 15: break;
          case 5: 
            { return JsonPathTypes.EVAL_CONTEXT;
            } 
            // fall through
          case 16: break;
          case 6: 
            { return JsonPathTypes.DOT;
            } 
            // fall through
          case 17: break;
          case 7: 
            { return JsonPathTypes.LBRACKET;
            } 
            // fall through
          case 18: break;
          case 8: 
            { return JsonPathTypes.RBRACKET;
            } 
            // fall through
          case 19: break;
          case 9: 
            { return JsonPathTypes.WILDCARD;
            } 
            // fall through
          case 20: break;
          case 10: 
            { return JsonPathTypes.COMMA;
            } 
            // fall through
          case 21: break;
          case 11: 
            { return JsonPathTypes.RECURSIVE_DESCENT;
            } 
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
